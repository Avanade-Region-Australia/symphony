#!/usr/bin/env bash

source scripts/utilities/shell_logger.sh
source scripts/utilities/shell_inputs.sh
source scripts/utilities/http.sh
source scripts/utilities/service_principal.sh
source scripts/install/banner.sh
source scripts/install/contents.sh

#script name
declare me=`basename "$0"`
declare ORCHESTRATOR=""
declare IACTOOL=""
declare command=""
declare sub_command=""

main() {
    show_banner
    parse_args "$@"
    process_command
}

provision() {
    echo "deploy stuff!"
}

configure_orchestrator() {
    ORCHESTRATOR=${args[0]}      
    IACTOOL=${args[1]}  
    _validate_inputs
    code=$?
    if [[ $code > 0 ]]; then
        usage
        exit $code
    fi

    if [ $ORCHESTRATOR == "azdo" ]; then
        source scripts/install/providers/azdo/azdo.sh
        mkdir -p scripts/install/providers/azdo/temp
    else
        source scripts/install/providers/github/github.sh
    fi

    # workflow
    loadServicePrincipalCredentials
    printEnvironment
    load_inputs
    configure_repo
    configure_credentials
    
    # cleanup
    remove_yaml
    if [ $IACTOOL == "bicep" ]; then
    create_pipelines_bicep
    remove_tf_content
    else
    create_pipelines_terraform
    remove_bicep_content
    fi
    git add .
    git commit -m "cleanup unused iac files"
    
    # push the code the repo
    git push origin --all

    check_error_log
}

pipeline() {
    case $sub_command in
        "config")
            configure_orchestrator
            ;;
        *)
            usage
            ;;
    esac
}

parse_args() {
    while (( "$#" )); do
        case "${1}" in
            provision)
                shift 1
                export command="workspace"
                ;;
            pipeline)
                shift 1
                export command="pipeline"
                export sub_command="$1"
                shift 1
                ;;
            -h|--help)
                shift 1
                export command="help"
                usage
                ;;
            *) # preserve positional arguments
                PARAMS+="${1} "
                shift
                ;;
        esac
    done
    args=( $PARAMS )

    if [[ -z "$command" ]]; then
        usage
    fi
}

process_command() {
    case "$command" in
        provision)
            provision
            ;;
        pipeline)
            pipeline
            ;;
    esac
}

# main
main "$@"

